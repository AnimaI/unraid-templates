############################
# Docker build environment #
############################

FROM node:lts-bookworm-slim AS build

# Tools installieren
RUN apt-get update && apt-get install -y \
  curl \
  build-essential \
  python3 \
  && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

WORKDIR /build

# Hole die Platzhalter-Dateien von deinem unraid-templates-Repo
RUN curl -sSL https://raw.githubusercontent.com/AnimaI/unraid-templates/main/public-pool/proxy.config.prod.json.tpl \
    -o ./proxy.config.prod.json && \
    curl -sSL https://raw.githubusercontent.com/AnimaI/unraid-templates/main/public-pool/proxy.config.local.json.tpl \
    -o ./proxy.config.local.json && \
    curl -sSL https://raw.githubusercontent.com/AnimaI/unraid-templates/main/public-pool/environment.prod.ts.tpl \
    -o ./src/environments/environment.prod.ts && \
    curl -sSL https://raw.githubusercontent.com/AnimaI/unraid-templates/main/public-pool/environment.ts.tpl \
    -o ./src/environments/environment.ts

# Kopiere restlichen Code (dein Fork) ins Image
COPY . .

# Baue Angular UI
RUN npm install && npm run build

############################
# Docker final environment #
############################

FROM caddy:alpine AS final

WORKDIR /var/www/html

COPY --from=build /build/dist/public-pool-ui .

# Starte Caddy statisch
EXPOSE 80
CMD ["caddy", "file-server", "--root", "/var/www/html", "--browse"]
